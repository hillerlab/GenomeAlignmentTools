/* growthCondition.h was originally generated by the autoSql program, which also 
 * generated growthCondition.c and growthCondition.sql.  This header links the database and
 * the RAM representation of objects. */

/* Copyright (C) 2004 The Regents of the University of California 
 * See README in this or parent directory for licensing information. */

#ifndef GROWTHCONDITION_H
#define GROWTHCONDITION_H

#define GROWTHCONDITION_NUM_COLS 3

struct growthCondition
/* Conditions under which cells are grown */
    {
    struct growthCondition *next;  /* Next in singly linked list. */
    char *name;	/* Symbolic name of growth condition */
    char *shortLabel;	/* Short description of growth condition */
    char *longLabel;	/* Longer description of growth condition */
    };

void growthConditionStaticLoad(char **row, struct growthCondition *ret);
/* Load a row from growthCondition table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct growthCondition *growthConditionLoad(char **row);
/* Load a growthCondition from row fetched with select * from growthCondition
 * from database.  Dispose of this with growthConditionFree(). */

struct growthCondition *growthConditionLoadAll(char *fileName);
/* Load all growthCondition from whitespace-separated file.
 * Dispose of this with growthConditionFreeList(). */

struct growthCondition *growthConditionLoadAllByChar(char *fileName, char chopper);
/* Load all growthCondition from chopper separated file.
 * Dispose of this with growthConditionFreeList(). */

#define growthConditionLoadAllByTab(a) growthConditionLoadAllByChar(a, '\t');
/* Load all growthCondition from tab separated file.
 * Dispose of this with growthConditionFreeList(). */

struct growthCondition *growthConditionCommaIn(char **pS, struct growthCondition *ret);
/* Create a growthCondition out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new growthCondition */

void growthConditionFree(struct growthCondition **pEl);
/* Free a single dynamically allocated growthCondition such as created
 * with growthConditionLoad(). */

void growthConditionFreeList(struct growthCondition **pList);
/* Free a list of dynamically allocated growthCondition's */

void growthConditionOutput(struct growthCondition *el, FILE *f, char sep, char lastSep);
/* Print out growthCondition.  Separate fields with sep. Follow last field with lastSep. */

#define growthConditionTabOut(el,f) growthConditionOutput(el,f,'\t','\n');
/* Print out growthCondition as a line in a tab-separated file. */

#define growthConditionCommaOut(el,f) growthConditionOutput(el,f,',',',');
/* Print out growthCondition as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* GROWTHCONDITION_H */

