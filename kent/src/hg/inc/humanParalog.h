/* humanParalog.h was originally generated by the autoSql program, which also 
 * generated humanParalog.c and humanParalog.sql.  This header links the database and
 * the RAM representation of objects. */

/* Copyright (C) 2002 The Regents of the University of California 
 * See README in this or parent directory for licensing information. */

#ifndef HUMANPARALOG_H
#define HUMANPARALOG_H

struct humanParalog
/* Human Paralog */
    {
    struct humanParalog *next;  /* Next in singly linked list. */
    char *chrom;	/* Human Chrom */
    unsigned chromStart;	/* Start on Human */
    unsigned chromEnd;	/* End on Human */
    char *name;	/* Human Gene Prediction - paralog */
    unsigned score;	/* Human mouse aligment score using Blat */
    char *strand;	/* Strand on Human */
    unsigned thickStart;	/* Start on Human */
    unsigned thickEnd;	/* End on Human */
    };

void humanParalogStaticLoad(char **row, struct humanParalog *ret);
/* Load a row from humanParalog table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct humanParalog *humanParalogLoad(char **row);
/* Load a humanParalog from row fetched with select * from humanParalog
 * from database.  Dispose of this with humanParalogFree(). */

struct humanParalog *humanParalogLoadAll(char *fileName);
/* Load all humanParalog from a tab-separated file.
 * Dispose of this with humanParalogFreeList(). */

struct humanParalog *humanParalogLoadWhere(struct sqlConnection *conn, char *table, char *where);
/* Load all humanParalog from table that satisfy where clause. The
 * where clause may be NULL in which case whole table is loaded
 * Dispose of this with humanParalogFreeList(). */

struct humanParalog *humanParalogCommaIn(char **pS, struct humanParalog *ret);
/* Create a humanParalog out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new humanParalog */

void humanParalogFree(struct humanParalog **pEl);
/* Free a single dynamically allocated humanParalog such as created
 * with humanParalogLoad(). */

void humanParalogFreeList(struct humanParalog **pList);
/* Free a list of dynamically allocated humanParalog's */

void humanParalogOutput(struct humanParalog *el, FILE *f, char sep, char lastSep);
/* Print out humanParalog.  Separate fields with sep. Follow last field with lastSep. */

#define humanParalogTabOut(el,f) humanParalogOutput(el,f,'\t','\n');
/* Print out humanParalog as a line in a tab-separated file. */

#define humanParalogCommaOut(el,f) humanParalogOutput(el,f,',',',');
/* Print out humanParalog as a comma separated list including final comma. */

#endif /* HUMANPARALOG_H */

