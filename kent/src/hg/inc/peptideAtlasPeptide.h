/* peptideAtlasPeptide.h was originally generated by the autoSql program, which also 
 * generated peptideAtlasPeptide.c and peptideAtlasPeptide.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef PEPTIDEATLASPEPTIDE_H
#define PEPTIDEATLASPEPTIDE_H

#define PEPTIDEATLASPEPTIDE_NUM_COLS 5

extern char *peptideAtlasPeptideCommaSepFieldNames;

struct peptideAtlasPeptide
/* PeptideAtlas peptide description */
    {
    struct peptideAtlasPeptide *next;  /* Next in singly linked list. */
    char *accession;	/* Accession */
    char *sequence;	/* Amino acid sequence */
    int sampleCount;	/* Number of samples where this peptide was observed */
    float hydrophobicity;	/* Hydrophobicity metric */
    float proteotypicScore;	/* Metric of suitability of this peptide for protein identification */
    };

void peptideAtlasPeptideStaticLoad(char **row, struct peptideAtlasPeptide *ret);
/* Load a row from peptideAtlasPeptide table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct peptideAtlasPeptide *peptideAtlasPeptideLoad(char **row);
/* Load a peptideAtlasPeptide from row fetched with select * from peptideAtlasPeptide
 * from database.  Dispose of this with peptideAtlasPeptideFree(). */

struct peptideAtlasPeptide *peptideAtlasPeptideLoadAll(char *fileName);
/* Load all peptideAtlasPeptide from whitespace-separated file.
 * Dispose of this with peptideAtlasPeptideFreeList(). */

struct peptideAtlasPeptide *peptideAtlasPeptideLoadAllByChar(char *fileName, char chopper);
/* Load all peptideAtlasPeptide from chopper separated file.
 * Dispose of this with peptideAtlasPeptideFreeList(). */

#define peptideAtlasPeptideLoadAllByTab(a) peptideAtlasPeptideLoadAllByChar(a, '\t');
/* Load all peptideAtlasPeptide from tab separated file.
 * Dispose of this with peptideAtlasPeptideFreeList(). */

struct peptideAtlasPeptide *peptideAtlasPeptideCommaIn(char **pS, struct peptideAtlasPeptide *ret);
/* Create a peptideAtlasPeptide out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new peptideAtlasPeptide */

void peptideAtlasPeptideFree(struct peptideAtlasPeptide **pEl);
/* Free a single dynamically allocated peptideAtlasPeptide such as created
 * with peptideAtlasPeptideLoad(). */

void peptideAtlasPeptideFreeList(struct peptideAtlasPeptide **pList);
/* Free a list of dynamically allocated peptideAtlasPeptide's */

void peptideAtlasPeptideOutput(struct peptideAtlasPeptide *el, FILE *f, char sep, char lastSep);
/* Print out peptideAtlasPeptide.  Separate fields with sep. Follow last field with lastSep. */

#define peptideAtlasPeptideTabOut(el,f) peptideAtlasPeptideOutput(el,f,'\t','\n');
/* Print out peptideAtlasPeptide as a line in a tab-separated file. */

#define peptideAtlasPeptideCommaOut(el,f) peptideAtlasPeptideOutput(el,f,',',',');
/* Print out peptideAtlasPeptide as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* PEPTIDEATLASPEPTIDE_H */

