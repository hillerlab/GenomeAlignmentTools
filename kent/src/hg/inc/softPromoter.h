/* softPromoter.h was originally generated by the autoSql program, which also 
 * generated softPromoter.c and softPromoter.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef SOFTPROMOTER_H
#define SOFTPROMOTER_H

struct softPromoter
/* Softberry's Promoter Predictions */
    {
    struct softPromoter *next;  /* Next in singly linked list. */
    char *chrom;	/* Human chromosome or FPC contig */
    unsigned chromStart;	/* Start position in chromosome */
    unsigned chromEnd;	/* End position in chromosome */
    char *name;	/* As displayed in browser */
    unsigned score;	/* Score from 0 to 1000 */
    char *type;	/* TATA+ or TATAless currently */
    float origScore;	/* Score in original file, not scaled */
    char *origName;	/* Name in original file */
    char *blockString;	/* From original file.  I'm not sure how to interpret. */
    };

void softPromoterStaticLoad(char **row, struct softPromoter *ret);
/* Load a row from softPromoter table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct softPromoter *softPromoterLoad(char **row);
/* Load a softPromoter from row fetched with select * from softPromoter
 * from database.  Dispose of this with softPromoterFree(). */

struct softPromoter *softPromoterLoadAll(char *fileName);
/* Load all softPromoter from a tab-separated file.
 * Dispose of this with softPromoterFreeList(). */

struct softPromoter *softPromoterCommaIn(char **pS, struct softPromoter *ret);
/* Create a softPromoter out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new softPromoter */

void softPromoterFree(struct softPromoter **pEl);
/* Free a single dynamically allocated softPromoter such as created
 * with softPromoterLoad(). */

void softPromoterFreeList(struct softPromoter **pList);
/* Free a list of dynamically allocated softPromoter's */

void softPromoterOutput(struct softPromoter *el, FILE *f, char sep, char lastSep);
/* Print out softPromoter.  Separate fields with sep. Follow last field with lastSep. */

#define softPromoterTabOut(el,f) softPromoterOutput(el,f,'\t','\n');
/* Print out softPromoter as a line in a tab-separated file. */

#define softPromoterCommaOut(el,f) softPromoterOutput(el,f,',',',');
/* Print out softPromoter as a comma separated list including final comma. */

#endif /* SOFTPROMOTER_H */

