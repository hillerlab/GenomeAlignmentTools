/* affyAllExonProbe.h was originally generated by the autoSql program, which also 
 * generated affyAllExonProbe.c and affyAllExonProbe.sql.  This header links the database and
 * the RAM representation of objects. */

/* Copyright (C) 2013 The Regents of the University of California 
 * See README in this or parent directory for licensing information. */

#ifndef AFFYALLEXONPROBE_H
#define AFFYALLEXONPROBE_H

#ifndef JKSQL_H
#include "jksql.h"
#endif

#define AFFYALLEXONPROBE_NUM_COLS 13

struct affyAllExonProbe
/* Information for a probe on an Affymetrix all-exon chip */
    {
    struct affyAllExonProbe *next;  /* Next in singly linked list. */
    char *name;	/* ID of the probe */
    unsigned numIndependentProbes;	/* ??? Totatlly unsure */
    char *exonClusterId;	/* ??? ID of the probes exon cluster */
    unsigned numNonOverlapProbes;	/* ??? Probably related to numIndependentProbes */
    unsigned probeCount;	/* ??? These are starting to all sound the same */
    char *transcriptClustId;	/* Transcript cluster this exon probe belongs to */
    unsigned probesetType;	/* ??? */
    unsigned numXHybeProbe;	/* ??? cross hyb something */
    unsigned psrId;	/* ??? */
    char *level;	/* ??? */
    char *evidence;	/* Evidence for the exon from various sources */
    unsigned bounded;	/* ??? Yes or No */
    unsigned cds;	/* ??? Yes or No */
    };

void affyAllExonProbeStaticLoad(char **row, struct affyAllExonProbe *ret);
/* Load a row from affyAllExonProbe table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct affyAllExonProbe *affyAllExonProbeLoad(char **row);
/* Load a affyAllExonProbe from row fetched with select * from affyAllExonProbe
 * from database.  Dispose of this with affyAllExonProbeFree(). */

struct affyAllExonProbe *affyAllExonProbeLoadAll(char *fileName);
/* Load all affyAllExonProbe from whitespace-separated file.
 * Dispose of this with affyAllExonProbeFreeList(). */

struct affyAllExonProbe *affyAllExonProbeLoadAllByChar(char *fileName, char chopper);
/* Load all affyAllExonProbe from chopper separated file.
 * Dispose of this with affyAllExonProbeFreeList(). */

#define affyAllExonProbeLoadAllByTab(a) affyAllExonProbeLoadAllByChar(a, '\t');
/* Load all affyAllExonProbe from tab separated file.
 * Dispose of this with affyAllExonProbeFreeList(). */

struct affyAllExonProbe *affyAllExonProbeLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all affyAllExonProbe from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with affyAllExonProbeFreeList(). */

void affyAllExonProbeSaveToDb(struct sqlConnection *conn, struct affyAllExonProbe *el, char *tableName, int updateSize);
/* Save affyAllExonProbe as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct affyAllExonProbe *affyAllExonProbeCommaIn(char **pS, struct affyAllExonProbe *ret);
/* Create a affyAllExonProbe out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new affyAllExonProbe */

void affyAllExonProbeFree(struct affyAllExonProbe **pEl);
/* Free a single dynamically allocated affyAllExonProbe such as created
 * with affyAllExonProbeLoad(). */

void affyAllExonProbeFreeList(struct affyAllExonProbe **pList);
/* Free a list of dynamically allocated affyAllExonProbe's */

void affyAllExonProbeOutput(struct affyAllExonProbe *el, FILE *f, char sep, char lastSep);
/* Print out affyAllExonProbe.  Separate fields with sep. Follow last field with lastSep. */

#define affyAllExonProbeTabOut(el,f) affyAllExonProbeOutput(el,f,'\t','\n');
/* Print out affyAllExonProbe as a line in a tab-separated file. */

#define affyAllExonProbeCommaOut(el,f) affyAllExonProbeOutput(el,f,',',',');
/* Print out affyAllExonProbe as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* AFFYALLEXONPROBE_H */

