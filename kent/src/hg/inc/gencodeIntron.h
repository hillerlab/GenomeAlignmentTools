/* gencodeIntron.h was originally generated by the autoSql program, which also 
 * generated gencodeIntron.c and gencodeIntron.sql.  This header links the database and
 * the RAM representation of objects. */

/* Copyright (C) 2013 The Regents of the University of California 
 * See README in this or parent directory for licensing information. */

#ifndef GENCODEINTRON_H
#define GENCODEINTRON_H

#ifndef JKSQL_H
#include "jksql.h"
#endif

#define GENCODEINTRON_NUM_COLS 8

struct gencodeIntron
/* Gencode intron status */
    {
    struct gencodeIntron *next;  /* Next in singly linked list. */
    char *chrom;	/* Chromosome or FPC contig */
    unsigned chromStart;	/* Start position in chromosome */
    unsigned chromEnd;	/* End position in chromosome */
    char *name;	/* Intron_id from GTF */
    char *status;	/* enum('not_tested', 'RT_positive','RT_negative','RT_wrong_junction', 'RT_submitted') */
    char strand[2];	/* + or - */
    char *transcript;	/* Transcript_id from GTF */
    char *geneId;	/* Gene_id from GTF */
    };

void gencodeIntronStaticLoad(char **row, struct gencodeIntron *ret);
/* Load a row from gencodeIntron table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct gencodeIntron *gencodeIntronLoad(char **row);
/* Load a gencodeIntron from row fetched with select * from gencodeIntron
 * from database.  Dispose of this with gencodeIntronFree(). */

struct gencodeIntron *gencodeIntronLoadAll(char *fileName);
/* Load all gencodeIntron from whitespace-separated file.
 * Dispose of this with gencodeIntronFreeList(). */

struct gencodeIntron *gencodeIntronLoadAllByChar(char *fileName, char chopper);
/* Load all gencodeIntron from chopper separated file.
 * Dispose of this with gencodeIntronFreeList(). */

#define gencodeIntronLoadAllByTab(a) gencodeIntronLoadAllByChar(a, '\t');
/* Load all gencodeIntron from tab separated file.
 * Dispose of this with gencodeIntronFreeList(). */

struct gencodeIntron *gencodeIntronLoadByQuery(struct sqlConnection *conn, char *query, int rowOffset);
/* Load all gencodeIntron from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with gencodeIntronFreeList(). */

void gencodeIntronSaveToDb(struct sqlConnection *conn, struct gencodeIntron *el, char *tableName, int updateSize);
/* Save gencodeIntron as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct gencodeIntron *gencodeIntronCommaIn(char **pS, struct gencodeIntron *ret);
/* Create a gencodeIntron out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new gencodeIntron */

void gencodeIntronFree(struct gencodeIntron **pEl);
/* Free a single dynamically allocated gencodeIntron such as created
 * with gencodeIntronLoad(). */

void gencodeIntronFreeList(struct gencodeIntron **pList);
/* Free a list of dynamically allocated gencodeIntron's */

void gencodeIntronOutput(struct gencodeIntron *el, FILE *f, char sep, char lastSep);
/* Print out gencodeIntron.  Separate fields with sep. Follow last field with lastSep. */

#define gencodeIntronTabOut(el,f) gencodeIntronOutput(el,f,'\t','\n');
/* Print out gencodeIntron as a line in a tab-separated file. */

#define gencodeIntronCommaOut(el,f) gencodeIntronOutput(el,f,',',',');
/* Print out gencodeIntron as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

void gencodeIntronTableCreate(struct sqlConnection *conn, char *tableName, int indexSize);
/* Create a gencodeIntron table with the given name */

#endif /* GENCODEINTRON_H */

